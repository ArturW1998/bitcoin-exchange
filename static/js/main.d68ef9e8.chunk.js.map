{"version":3,"sources":["styles/styles.module.scss","constants/environment.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","constants/sortDirections.ts","constants/cellValue.ts","state/ducks/quoteTable/actions.ts","state/ducks/quoteTable/reducer.ts","state/ducks/quoteTable/selectors.ts","state/ducks/quoteTable/index.ts","state/store.ts","views/components/ErrorIndicator/ErrorIndicator.tsx","views/components/ErrorBoundary/ErrorBoundary.tsx","utils/getSortByField.ts","utils/getSortedTickers.ts","constants/quoteTableClasses.ts","constants/requestIds.ts","utils/getExtClasses.ts","utils/getSortClasses.ts","constants/paths.ts","api/getSymbols.ts","api/getInitialTickers.ts","api/updateTicker.ts","constants/errorTexts.ts","api/socketConnect.ts","api/tickerQueue.ts","constants/tableFields.ts","views/components/QuoteTableRow/QuoteTableRow.tsx","views/components/QuoteTableHead/QuoteTableHead.tsx","views/components/QuoteTableView/QuoteTableView.tsx","views/containers/QuoteTable/QuoteTable.tsx","views/containers/QuoteTickersControls/QuoteTickersControls.tsx","App.tsx","index.tsx"],"names":["module","exports","ENV","IS_PROD","NODE_ENV","IS_DEV","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","SORT_DIRECTIONS","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","CELL_VALUE","prepareTickersMap","tickersMap","result","forEach","ticker","push","payload","tickersActions","tickers","set","createAction","update","symbols","toggleDarkTheme","setSortType","toggleLimit","setError","initialTickersState","data","previousData","onLimit50","sortType","field","type","DOWN","isDarkTheme","reducer","createReducer","builder","addCase","tickersCache","Object","keys","id","existIndex","findIndex","symbol","store","configureStore","combineReducers","reducers","devTools","ErrorIndicator","children","message","className","styles","errorTitle","errorMessage","ErrorBoundary","hasError","this","props","Component","getSortByField","tickerA","tickerB","fieldIsSymbol","fieldA","fieldB","upSortType","UP","getSortedTickers","tickersState","sortParams","sortByLastDown","sort","slice","QUOTE_TABLE_CLASSES","CELL_VALUE_UP","CELL_VALUE_DOWN","DARK","TABLE","REQUEST_IDS","getExtClasses","previousTicker","tableField","extClasses","value","baseCurrency","feeCurrency","compare","getSortClasses","sortClasses","thSortUp","thSortDown","PATHS","getSymbols","ws","Promise","resolve","addEventListener","msgSymbolsHandler","msg","JSON","parse","removeEventListener","send","stringify","GET_SYMBOLS","method","getInitialTickers","totalTickers","tickerCache","Map","handleInitTickers","params","size","length","symbolData","SUBSCRIBE_TICKER","updateTicker","dispatch","controlPoint","Date","now","quoteTableActions","clear","ERROR_TEXTS","UNABLE_TO_CONNECT","socketConnect","tickerQueue","a","symbolsAction","tickersAction","initialTickers","QUOTE_TABLE_FIELDS","title","memo","key","map","th","QuoteTableHead","onClick","QuoteTableView","themeDark","symbolsMap","tableClasses","quoteTable","QuoteTable","useDispatch","useSelector","quoteTableSelectors","useEffect","WebSocket","BASE_PATH","WS_PATH","close","sortedTickers","QuoteTickersControls","BTNS","action","text","aria-label","i","btn","App","ROWS","component","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","includes","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d68ef9e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quoteTable\":\"styles_quoteTable__2wm5a\",\"th\":\"styles_th__2FCC1\",\"thSortDown\":\"styles_thSortDown__1z6Te\",\"thSortUp\":\"styles_thSortUp__2R3D0\",\"btn\":\"styles_btn__3sPcG\",\"error\":\"styles_error__UmtkX\",\"errorTitle\":\"styles_errorTitle__1V28p\",\"errorMessage\":\"styles_errorMessage__1NebD\"};","import { Environment } from '../types/constants';\n\nconst { NODE_ENV } = process.env;\n\nconst ENV: Environment = {\n  IS_PROD: NODE_ENV === 'production',\n  IS_DEV: NODE_ENV === 'development',\n};\n\nexport default ENV;\n","/* eslint-disable no-param-reassign, no-console, @typescript-eslint/prefer-regexp-exec */\n\nimport ENV from './constants/environment';\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (ENV.IS_PROD && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && !contentType.includes('javascript'))) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","enum SORT_DIRECTIONS {\n  UP = 'up',\n  DOWN = 'down',\n}\n\nexport default SORT_DIRECTIONS;\n","enum CELL_VALUE {\n  DOWN = -1,\n  UP = 1,\n  MIDDLE = 0,\n}\n\nexport default CELL_VALUE;\n","import { createAction } from '@reduxjs/toolkit';\n\nimport {\n  IQuoteTicker,\n  IQuoteTickerSymbol,\n  ISortParams,\n  ErrorMessage,\n} from '../../../types/features';\nimport {\n  ICreateActionTickerPayload,\n  PrepareTickersMap,\n  SetUpdateTickersPayload,\n} from '../../../types/actions';\n\nconst prepareTickersMap = (tickersMap: SetUpdateTickersPayload): PrepareTickersMap => {\n  const result: IQuoteTicker[] = [];\n\n  tickersMap.forEach(ticker => result.push(ticker));\n\n  return {\n    payload: result,\n  };\n};\n\nconst tickersActions = {\n  tickers: {\n    set: createAction<ICreateActionTickerPayload>('tickers/set', prepareTickersMap),\n    update: createAction<ICreateActionTickerPayload>('tickers/update', prepareTickersMap),\n  },\n  symbols: {\n    set: createAction<IQuoteTickerSymbol[]>('tickers/symbols/set'),\n  },\n  toggleDarkTheme: createAction<void>('tickers/toggle/DarkTheme'),\n  setSortType: createAction<ISortParams>('tickers/sortType/set'),\n  toggleLimit: createAction<void>('tickers/toggle/limit50'),\n  setError: createAction<ErrorMessage>('tickers/set/error'),\n};\n\nexport default tickersActions;\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport SORT_DIRECTIONS from '../../../constants/sortDirections';\nimport tickersActions from './actions';\n\nimport { ITickersState } from '../../../types/slices';\nimport { IQuoteTicker, IQuoteTickerSymbol } from '../../../types/features';\n\nexport const initialTickersState: ITickersState = {\n  data: [],\n  previousData: {},\n  symbols: {},\n  onLimit50: true,\n  sortType: {\n    field: 'last',\n    type: SORT_DIRECTIONS.DOWN,\n  },\n  isDarkTheme: false,\n  error: null,\n};\n\nconst { tickers, symbols, toggleDarkTheme, setSortType, toggleLimit, setError } = tickersActions;\n\nconst reducer = createReducer(initialTickersState, builder => {\n  builder\n    .addCase(tickers.set, ({ data }, { payload: tickersCache }) => {\n      tickersCache.forEach((ticker: IQuoteTicker) => {\n        data.push(ticker);\n      });\n    })\n    .addCase(tickers.update, ({ data, previousData }, { payload: tickersCache }) => {\n      Object.keys(previousData).forEach(id => delete previousData[id]);\n\n      tickersCache.forEach(ticker => {\n        const existIndex: number = data.findIndex(({ symbol }) => symbol === ticker.symbol);\n\n        if (existIndex !== -1) {\n          previousData[ticker.symbol] = { ...data[existIndex] };\n          data[existIndex] = ticker;\n        } else {\n          data.push(ticker);\n        }\n      });\n    })\n    .addCase(symbols.set, ({ symbols }, { payload }) => {\n      payload.forEach((symbol: IQuoteTickerSymbol) => {\n        symbols[symbol.id] = symbol;\n      });\n    })\n    .addCase(toggleDarkTheme, state => {\n      state.isDarkTheme = !state.isDarkTheme;\n    })\n    .addCase(setSortType, (state, { payload }) => {\n      state.sortType = payload;\n    })\n    .addCase(toggleLimit, state => {\n      state.onLimit50 = !state.onLimit50;\n    })\n    .addCase(setError, (state, { payload }) => {\n      state.error = payload;\n    });\n});\n\nexport default reducer;\n","import { RootState } from '../../../types/store';\nimport { ITickersState } from '../../../types/slices';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const tickersSelector = ({ tickers }: RootState): ITickersState => tickers;\n\nexport default {\n  tickersSelector,\n};\n","import reducer from './reducer';\n\nexport { default as quoteTableActions } from './actions';\nexport { default as quoteTableSelectors } from './selectors';\n\nexport default reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\n\nimport ENV from '../constants/environment';\nimport * as reducers from './ducks';\n\nconst store = configureStore({\n  reducer: combineReducers(reducers),\n  devTools: ENV.IS_DEV,\n});\n\nexport default store;\n","import React from 'react';\n\nimport { IErrorIndicatorProps } from './types';\n\nimport styles from '../../../styles/styles.module.scss';\n\nconst ErrorIndicator: React.FC<IErrorIndicatorProps> = ({ children, message }) => (\n  <div className={styles.error}>\n    <p className={styles.errorTitle}>Something went wrong!</p>\n    <p className={styles.errorMessage}>{message}</p>\n    {children}\n  </div>\n);\n\nexport default ErrorIndicator;\n","import React, { Component } from 'react';\n\nimport ErrorIndicator from '../ErrorIndicator/ErrorIndicator';\n\nimport { IErrorBoundaryProps, IErrorBoundaryState, GetDerivedStateFromError } from './types';\n\nclass ErrorBoundary extends Component<IErrorBoundaryProps, IErrorBoundaryState> {\n  readonly state = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(): GetDerivedStateFromError {\n    return { hasError: true };\n  }\n\n  render(): React.ReactNode {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    return hasError ? <ErrorIndicator /> : children;\n  }\n}\n\nexport default ErrorBoundary;\n","import SORT_DIRECTIONS from '../constants/sortDirections';\n\nimport { IQuoteTicker, QuoteTickerFields, SortByField, SortType } from '../types/features';\n\nconst getSortByField = (field: QuoteTickerFields, sortType?: SortType): SortByField => {\n  return (tickerA: IQuoteTicker, tickerB: IQuoteTicker) => {\n    const fieldIsSymbol: boolean = field === 'symbol';\n\n    const fieldA: string | number = fieldIsSymbol ? tickerA[field] : +tickerA[field];\n    const fieldB: string | number = fieldIsSymbol ? tickerB[field] : +tickerB[field];\n\n    const upSortType: boolean = !sortType || sortType === SORT_DIRECTIONS.UP;\n\n    if (fieldA > fieldB) return upSortType ? 1 : -1;\n    if (fieldA < fieldB) return upSortType ? -1 : 1;\n\n    return 0;\n  };\n};\n\nexport default getSortByField;\n","import SORT_DIRECTIONS from '../constants/sortDirections';\nimport { getSortByField } from './index';\n\nimport { ITickersState } from '../types/slices';\nimport { IQuoteTicker, ISortParams, SortByField } from '../types/features';\n\nconst getSortedTickers = (tickersState: ITickersState, sortParams: ISortParams): IQuoteTicker[] => {\n  const sortByLastDown: SortByField = getSortByField('last', SORT_DIRECTIONS.DOWN);\n\n  let data: IQuoteTicker[] = [...tickersState.data];\n\n  data = data.sort(sortByLastDown);\n\n  if (tickersState.onLimit50) data = data.slice(0, 49);\n\n  data = data.sort(getSortByField(sortParams.field, sortParams.type));\n\n  return data;\n};\n\nexport default getSortedTickers;\n","const QUOTE_TABLE_CLASSES = {\n  CELL_VALUE_UP: 'text-success',\n  CELL_VALUE_DOWN: 'text-danger',\n  DARK: {\n    TABLE: 'table-dark',\n  },\n};\n\nexport default QUOTE_TABLE_CLASSES;\n","enum REQUEST_IDS {\n  GET_SYMBOLS = 'getSymbols',\n  SUBSCRIBE_TICKER = 'subscribeTicker',\n}\n\nexport default REQUEST_IDS;\n","import QUOTE_TABLE_CLASSES from '../constants/quoteTableClasses';\nimport CELL_VALUE from '../constants/cellValue';\n\nimport { ITableField } from '../types/constants';\nimport { ExtClasses } from '../types/utils';\nimport { IQuoteTicker, IQuoteTickerSymbol, PreviousTicker } from '../types/features';\n\nconst getExtClasses = (\n  ticker: IQuoteTicker,\n  symbol: IQuoteTickerSymbol,\n  previousTicker: PreviousTicker,\n  tableField: ITableField,\n): ExtClasses => {\n  let extClasses = '';\n  let value: string = ticker[tableField.field];\n\n  if (tableField.field === 'symbol') value = `${symbol.baseCurrency} / ${symbol.feeCurrency}`;\n\n  if (previousTicker !== null) {\n    switch (tableField.compare(ticker, previousTicker)) {\n      case CELL_VALUE.DOWN:\n        extClasses = QUOTE_TABLE_CLASSES.CELL_VALUE_DOWN;\n        break;\n      case CELL_VALUE.UP:\n        extClasses = QUOTE_TABLE_CLASSES.CELL_VALUE_UP;\n        break;\n      default:\n        break;\n    }\n  }\n\n  return { extClasses, value };\n};\n\nexport default getExtClasses;\n","import SORT_DIRECTIONS from '../constants/sortDirections';\n\nimport { ITableField } from '../types/constants';\nimport { ISortParams } from '../types/features';\n\nimport styles from '../styles/styles.module.scss';\n\nconst getSortClasses = (tableField: ITableField, sortParams: ISortParams): string => {\n  let sortClasses = '';\n\n  if (tableField.field === sortParams.field) {\n    sortClasses = sortParams.type === SORT_DIRECTIONS.UP ? styles.thSortUp : styles.thSortDown;\n  }\n\n  return sortClasses;\n};\n\nexport default getSortClasses;\n","enum PATHS {\n  BASE_PATH = 'wss://api.exchange.bitcoin.com/api/2/ws',\n  WS_PATH = '/ws',\n}\n\nexport default PATHS;\n","import REQUEST_IDS from '../constants/requestIds';\n\nimport { IQuoteTickerSymbol } from '../types/features';\nimport { WebSocketApp } from '../types/utils';\nimport { Symbols } from '../types/api';\n\nconst getSymbols = (ws: WebSocketApp): Promise<IQuoteTickerSymbol[]> => {\n  return new Promise<IQuoteTickerSymbol[]>(resolve => {\n    const msgSymbolsHandler = ({ data }: MessageEvent): void => {\n      const msg: Symbols = JSON.parse(data);\n\n      ws.removeEventListener('message', msgSymbolsHandler);\n      resolve(msg.result);\n    };\n\n    ws.addEventListener('message', msgSymbolsHandler);\n    ws.send(\n      JSON.stringify({\n        id: REQUEST_IDS.GET_SYMBOLS,\n        method: REQUEST_IDS.GET_SYMBOLS,\n      }),\n    );\n  });\n};\n\nexport default getSymbols;\n","import REQUEST_IDS from '../constants/requestIds';\n\nimport { WebSocketApp } from '../types/utils';\nimport { IQuoteTickerSymbol, IQuoteTicker } from '../types/features';\nimport { SocketData } from '../types/api';\n\nconst getInitialTickers = (\n  ws: WebSocketApp,\n  totalTickers: IQuoteTickerSymbol[],\n): Promise<Map<string, IQuoteTicker>> => {\n  return new Promise(resolve => {\n    const tickerCache = new Map<string, IQuoteTicker>();\n    const handleInitTickers = ({ data }: MessageEvent): void => {\n      const msg: SocketData = JSON.parse(data);\n\n      if ('method' in msg && msg.method === 'ticker') {\n        const ticker: IQuoteTicker = msg.params;\n\n        tickerCache.set(ticker.symbol, ticker);\n\n        if (tickerCache.size === totalTickers.length) {\n          resolve(tickerCache);\n          ws.removeEventListener('message', handleInitTickers);\n        }\n      }\n    };\n\n    ws.addEventListener('message', handleInitTickers);\n\n    totalTickers.forEach((symbolData: IQuoteTickerSymbol) =>\n      ws.send(\n        JSON.stringify({\n          id: REQUEST_IDS.SUBSCRIBE_TICKER,\n          method: REQUEST_IDS.SUBSCRIBE_TICKER,\n          params: {\n            symbol: symbolData.id,\n          },\n        }),\n      ),\n    );\n  });\n};\n\nexport default getInitialTickers;\n","import { quoteTableActions } from '../state/ducks/quoteTable';\n\nimport { WebSocketApp } from '../types/utils';\nimport { AppDispatch } from '../types/store';\nimport { IQuoteTicker } from '../types/features';\n\nconst updateIntervalMs = 50;\n\nconst updateTicker = (ws: WebSocketApp, dispatch: AppDispatch): void => {\n  const tickerCache = new Map<string, IQuoteTicker>();\n  let controlPoint: number = Date.now();\n\n  ws.addEventListener('message', ({ data }: MessageEvent) => {\n    const ticker: IQuoteTicker = JSON.parse(data).params;\n\n    tickerCache.set(ticker.symbol, ticker);\n\n    if (Date.now() - controlPoint > updateIntervalMs) {\n      const { tickers } = quoteTableActions;\n\n      dispatch(tickers.update(tickerCache));\n      controlPoint = Date.now();\n      tickerCache.clear();\n    }\n  });\n};\n\nexport default updateTicker;\n","const ERROR_TEXTS = {\n  UNABLE_TO_CONNECT:\n    'Unable to connect to the server to get ticker data. The server may have stopped working.',\n};\n\nexport default ERROR_TEXTS;\n","import PATHS from '../constants/paths';\nimport ERROR_TEXTS from '../constants/errorTexts';\nimport { quoteTableActions } from '../state/ducks/quoteTable';\n\nimport { WebSocketApp } from '../types/utils';\nimport { AppDispatch } from '../types/store';\n\nexport const tickersWs = (): WebSocketApp => new WebSocket(`${PATHS.BASE_PATH}${PATHS.WS_PATH}`);\n\nconst socketConnect = (ws: WebSocketApp, dispatch: AppDispatch): Promise<WebSocketApp | void> => {\n  const { setError } = quoteTableActions;\n  return new Promise<WebSocketApp | void>(resolve => {\n    ws.addEventListener('open', () => resolve());\n    ws.addEventListener('error', () => dispatch(setError(ERROR_TEXTS.UNABLE_TO_CONNECT)));\n  });\n};\n\nexport default socketConnect;\n","import { quoteTableActions } from '../state/ducks/quoteTable';\n\nimport { WebSocketApp } from '../types/utils';\nimport { AppDispatch } from '../types/store';\nimport getSymbols from './getSymbols';\nimport getInitialTickers from './getInitialTickers';\nimport updateTicker from './updateTicker';\nimport socketConnect from './socketConnect';\n\nimport { IQuoteTicker, IQuoteTickerSymbol } from '../types/features';\n\nconst tickerQueue = async (ws: WebSocketApp, dispatch: AppDispatch): Promise<void> => {\n  await socketConnect(ws, dispatch);\n\n  const symbols: IQuoteTickerSymbol[] = await getSymbols(ws);\n\n  const { symbols: symbolsAction, tickers: tickersAction } = quoteTableActions;\n\n  dispatch(symbolsAction.set(symbols));\n\n  const initialTickers: Map<string, IQuoteTicker> = await getInitialTickers(ws, symbols);\n\n  dispatch(tickersAction.set(initialTickers));\n\n  updateTicker(ws, dispatch);\n};\n\nexport default tickerQueue;\n","import getSortByField from '../utils/getSortByField';\n\nimport { ITableField } from '../types/constants';\n\nconst QUOTE_TABLE_FIELDS: ITableField[] = [\n  {\n    title: 'Ticker',\n    field: 'symbol',\n    compare: getSortByField('symbol'),\n  },\n  {\n    title: 'Bid',\n    field: 'bid',\n    compare: getSortByField('bid'),\n  },\n  {\n    title: 'Ask',\n    field: 'ask',\n    compare: getSortByField('ask'),\n  },\n  {\n    title: 'High',\n    field: 'high',\n    compare: getSortByField('high'),\n  },\n  {\n    title: 'Low',\n    field: 'low',\n    compare: getSortByField('low'),\n  },\n  {\n    title: 'Last',\n    field: 'last',\n    compare: getSortByField('last'),\n  },\n];\n\nexport default QUOTE_TABLE_FIELDS;\n","import React, { memo } from 'react';\n\nimport QUOTE_TABLE_FIELDS from '../../../constants/tableFields';\nimport getExtClasses from '../../../utils/getExtClasses';\n\nimport { ITableField } from '../../../types/constants';\nimport { ExtClasses } from '../../../types/utils';\nimport { IQuoteTableRowProps } from './types';\n\nimport styles from '../../../styles/styles.module.scss';\n\nconst QuoteTableRow: React.FC<IQuoteTableRowProps> = ({ ticker, previousTicker, symbol }) => (\n  <tr key={ticker.symbol}>\n    {QUOTE_TABLE_FIELDS.map((tableField: ITableField) => {\n      const { extClasses, value }: ExtClasses = getExtClasses(\n        ticker,\n        symbol,\n        previousTicker,\n        tableField,\n      );\n\n      return (\n        <td key={tableField.field} className={`${extClasses} ${styles.th}`}>\n          {value}\n        </td>\n      );\n    })}\n  </tr>\n);\n\nexport default memo(QuoteTableRow);\n","import React from 'react';\n\nimport QUOTE_TABLE_FIELDS from '../../../constants/tableFields';\nimport SORT_DIRECTIONS from '../../../constants/sortDirections';\nimport getSortClasses from '../../../utils/getSortClasses';\nimport { quoteTableActions } from '../../../state/ducks/quoteTable';\n\nimport { ISortParams } from '../../../types/features';\nimport { ITableField } from '../../../types/constants';\nimport { IQuoteTableHeadProps } from './types';\n\nconst QuoteTableHead: React.FC<IQuoteTableHeadProps> = ({ dispatch, sortParams }) => (\n  <thead>\n    <tr>\n      {QUOTE_TABLE_FIELDS.map((tableField: ITableField) => {\n        const sortClasses = getSortClasses(tableField, sortParams);\n\n        const handleClick = (): void => {\n          const isEqualFields: boolean = sortParams.field === tableField.field;\n\n          const payload: ISortParams = {\n            type:\n              isEqualFields && sortParams.type === SORT_DIRECTIONS.DOWN\n                ? SORT_DIRECTIONS.UP\n                : SORT_DIRECTIONS.DOWN,\n            field: tableField.field,\n          };\n\n          dispatch(quoteTableActions.setSortType(payload));\n        };\n\n        return (\n          <th key={tableField.field} className={sortClasses} onClick={handleClick}>\n            {tableField.title}\n          </th>\n        );\n      })}\n    </tr>\n  </thead>\n);\n\nexport default QuoteTableHead;\n","import React from 'react';\n\nimport QUOTE_TABLE_CLASSES from '../../../constants/quoteTableClasses';\nimport QuoteTableRow from '../QuoteTableRow/QuoteTableRow';\nimport QuoteTableHead from '../QuoteTableHead/QuoteTableHead';\n\nimport { IQuoteTableViewProps } from './types';\n\nimport styles from '../../../styles/styles.module.scss';\n\nconst QuoteTableView: React.FC<IQuoteTableViewProps> = ({\n  data,\n  previousData,\n  themeDark,\n  symbolsMap,\n  sortParams,\n  dispatch,\n}) => {\n  const tableClasses = themeDark ? QUOTE_TABLE_CLASSES.DARK.TABLE : '';\n\n  return (\n    <div className=\"table-responsive\">\n      <table className={`table table-striped ${styles.quoteTable} ${tableClasses}`}>\n        <QuoteTableHead dispatch={dispatch} sortParams={sortParams} />\n        <tbody>\n          {data.map(ticker => {\n            const previousTicker = previousData[ticker.symbol] || null;\n            const symbol = symbolsMap[ticker.symbol];\n\n            return (\n              <QuoteTableRow\n                key={ticker.symbol}\n                previousTicker={previousTicker}\n                symbol={symbol}\n                ticker={ticker}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default QuoteTableView;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getSortedTickers } from '../../../utils';\nimport { quoteTableSelectors } from '../../../state/ducks/quoteTable';\nimport tickerQueue from '../../../api/tickerQueue';\nimport { tickersWs } from '../../../api/socketConnect';\nimport QuoteTableView from '../../components/QuoteTableView/QuoteTableView';\nimport ErrorIndicator from '../../components/ErrorIndicator/ErrorIndicator';\n\nimport { ITickersState } from '../../../types/slices';\nimport { WebSocketApp } from '../../../types/utils';\nimport { IQuoteTicker } from '../../../types/features';\n\nconst QuoteTable: React.FC = () => {\n  const dispatch = useDispatch();\n  const tickersState = useSelector(quoteTableSelectors.tickersSelector);\n  const { sortType: sortParams }: ITickersState = tickersState;\n\n  useEffect(() => {\n    const ws: WebSocketApp = tickersWs();\n\n    tickerQueue(ws, dispatch);\n\n    return () => {\n      ws.close();\n    };\n  }, [dispatch]);\n\n  const sortedTickers: IQuoteTicker[] = getSortedTickers(tickersState, sortParams);\n\n  if (tickersState.error) {\n    return <ErrorIndicator message={tickersState.error} />;\n  }\n\n  return (\n    <QuoteTableView\n      data={sortedTickers}\n      dispatch={dispatch}\n      previousData={tickersState.previousData}\n      sortParams={sortParams}\n      symbolsMap={tickersState.symbols}\n      themeDark={tickersState.isDarkTheme}\n    />\n  );\n};\n\nexport default QuoteTable;\n","import React, { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { quoteTableActions } from '../../../state/ducks/quoteTable';\n\nimport { ControlsBtn } from './types';\n\nimport styles from '../../../styles/styles.module.scss';\n\nconst QuoteTickersControls: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { toggleLimit, toggleDarkTheme } = quoteTableActions;\n\n  const BTNS: ControlsBtn[] = [\n    {\n      id: 'Limit tickers',\n      action: toggleLimit(),\n      text: 'On / Off Limit tickers',\n    },\n    {\n      id: 'Dark Theme',\n      action: toggleDarkTheme(),\n      text: 'On / Off Dark Theme',\n    },\n  ];\n\n  return (\n    <div aria-label=\"Quote Tickers controls\">\n      {BTNS.map(({ id, action, text }: ControlsBtn, i: number) => {\n        const handleClick = (): void => {\n          dispatch(action);\n        };\n\n        return (\n          <Fragment key={id}>\n            <button className={`btn btn-primary ${styles.btn}`} onClick={handleClick} type=\"button\">\n              {text}\n            </button>\n            {i !== BTNS.length - 1 && ' '}\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default QuoteTickersControls;\n","import React from 'react';\n\nimport QuoteTable from './views/containers/QuoteTable/QuoteTable';\nimport QuoteTickersControls from './views/containers/QuoteTickersControls/QuoteTickersControls';\n\nimport { ContainerRow } from './types/constants';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App: React.FC = () => {\n  const ROWS: ContainerRow[] = [\n    { id: 'quoteTickersControls', component: QuoteTickersControls },\n    { id: 'quoteTable', component: QuoteTable },\n  ];\n\n  return (\n    <div className=\"container-lg\">\n      {ROWS.map(({ id, component: Component }: ContainerRow) => (\n        <div key={id} className=\"row pt-3\">\n          <div className=\"col\">\n            <Component />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport ENV from './constants/environment';\nimport store from './state/store';\nimport ErrorBoundary from './views/components/ErrorBoundary/ErrorBoundary';\nimport App from './App';\n\nimport './index.css';\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n\nif (ENV.IS_DEV) reportWebVitals(console.log); // eslint-disable-line no-console\n"],"sourceRoot":""}